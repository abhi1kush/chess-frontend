{"version":3,"sources":["sounds/capture.mp3","sounds/move.mp3","sounds/wrong.mp3","components/Clocks.js","components/MoveHistory.js","components/Settings.js","utils/soundUtils.js","components/ChessboardComponent.js","components/ChessGame.js","utils/storage.js","utils/helpers.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Clocks","_ref","whiteTime","blackTime","isWhiteTurn","React","createElement","className","MoveHistory","moveHistory","scrollRef","useRef","useEffect","current","scrollTop","scrollHeight","ref","map","move","index","key","Math","floor","Settings","theme","setTheme","enableSound","setEnableSound","isOpen","setIsOpen","useState","settingsRef","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener","onClick","toggleDropdown","prev","onChange","e","value","type","checked","playSound","sound","Audio","moveSound","checkmateSound","wrongSound","play","ChessboardComponent","position","handleMove","lastMove","Chessboard","onPieceDrop","source","from","to","boardWidth","window","innerHeight","customBoardStyle","maxWidth","customSquareStyles","backgroundColor","customDarkSquareStyle","customLightSquareStyle","ChessGame","gameRef","Chess","setPosition","fen","setMoveHistory","setWhiteTime","setBlackTime","setIsWhiteTurn","gameStarted","setGameStarted","setLastMove","localStorage","getItem","isLoaded","setIsLoaded","async","loadGameFromStorage","savedGame","gameData","JSON","parse","load","error","console","removeItem","turn","fetchData","saveGameToStorage","setItem","stringify","timer","setInterval","max","clearInterval","promotion","san","getMoveType","game","flags","includes","isCheckmate","inCheck","warn","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.3c480267.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/capture.16a09c1c.mp3\";","module.exports = __webpack_public_path__ + \"static/media/move.86644655.mp3\";","module.exports = __webpack_public_path__ + \"static/media/wrong.9ee53a8d.mp3\";","import React from \"react\";\nimport \"../styles/Clock.css\" \n\nconst Clocks = ({ whiteTime, blackTime, isWhiteTurn }) => {\n  return (\n    <div className=\"left-panel\">\n      <div className={`clock ${!isWhiteTurn ? \"active-turn\" : \"\"}`}>♚ {blackTime}s</div>\n      <div className={`clock ${isWhiteTurn ? \"active-turn\" : \"\"}`}>♔ {whiteTime}s</div>\n    </div>\n  );\n};\n\nexport default Clocks;\n","import React, { useEffect, useRef } from \"react\";\nimport \"../styles/MoveHistory.css\";\n\nconst MoveHistory = ({ moveHistory }) => {\n  const scrollRef = useRef(null);\n\n  // Auto-scroll to the latest move\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [moveHistory]);\n\n  return (\n    <div className=\"right-panel\">\n      <div className=\"move-history\">\n        <h3>Move History</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>White</th>\n              <th>Black</th>\n            </tr>\n          </thead>\n          <tbody ref={scrollRef}> {/* Attach ref to tbody */}\n            {moveHistory.map((move, index) =>\n              index % 2 === 0 ? ( // Every even index is a new move row\n                <tr key={index / 2}>\n                  <td>{Math.floor(index / 2) + 1}.</td>\n                  <td>{move}</td>\n                  <td>{moveHistory[index + 1] || \"\"}</td> {/* Handle missing black moves */}\n                </tr>\n              ) : null // Skip rendering odd indices separately\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default MoveHistory;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport \"../styles/Settings.css\";\n\nconst Settings = ({ theme, setTheme, enableSound, setEnableSound }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const settingsRef = useRef(null);\n\n  // Toggle dropdown visibility\n  const toggleDropdown = () => setIsOpen((prev) => !prev);\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (settingsRef.current && !settingsRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  return (\n    <div className=\"settings-container\" ref={settingsRef}>\n      <button className=\"settings-button\" onClick={toggleDropdown}>\n        ⚙ Settings\n      </button>\n\n      {isOpen && (\n        <div className=\"settings-dropdown\">\n          <div className=\"dropdown-item\">\n            <h4>Theme:</h4>\n            <select onChange={(e) => setTheme(e.target.value)} value={theme}>\n              <option value=\"classic\">Classic</option>\n              <option value=\"wood\">Wood</option>\n              <option value=\"marble\">Marble</option>\n              <option value=\"dark\">Dark Mode</option>\n            </select>\n          </div>\n          <div className=\"dropdown-item\">\n            <label>\n              <input type=\"checkbox\" checked={enableSound} onChange={(e) => setEnableSound(e.target.checked)} />\n              Enable Move Sound\n            </label>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Settings;\n","// utils/soundUtils.js\nimport moveSound from \"../sounds/move.mp3\";\nimport captureSound from \"../sounds/capture.mp3\";\nimport checkSound from \"../sounds/capture.mp3\";\nimport checkmateSound from \"../sounds/capture.mp3\";\nimport wrongSound from \"../sounds/wrong.mp3\";\n\nconst playSound = (type, enableSound) => {\n  if (!enableSound) return;\n\n  let sound;\n  switch (type) {\n    case \"move\":\n      sound = new Audio(moveSound);\n      break;\n    case \"capture\":\n      sound = new Audio(captureSound);\n      break;\n    case \"check\":\n      sound = new Audio(checkSound);\n      break;\n    case \"checkmate\":\n      sound = new Audio(checkmateSound);\n      break;\n    case \"wrong\":\n      sound = new Audio(wrongSound);\n      break;\n    default:\n      return;\n  }\n  sound.play();\n};\n\nexport default playSound;","import React from \"react\";\nimport { Chessboard } from \"react-chessboard\";\nimport \"../styles/ChessBoard.css\"\nimport \"../styles/themes.css\"\n\nconst ChessboardComponent = ({ position, handleMove, lastMove }) => {\n  const getSquareStyles = () => {\n    if (!lastMove) return {};\n    return {\n      [lastMove.from]: { backgroundColor: \"rgba(255, 255, 0, 0.5)\" },\n      [lastMove.to]: { backgroundColor: \"rgba(0, 255, 0, 0.5)\" },\n    };\n  };\n\n  return (\n    <div className=\"chess-board\">\n      <Chessboard\n        position={position}\n        onPieceDrop={(source, target) => handleMove({ from: source, to: target })}\n        boardWidth={window.innerHeight * 0.8}\n        customBoardStyle={{ maxWidth: \"80vw\" }}\n        customSquareStyles={getSquareStyles()}\n        customDarkSquareStyle={{ backgroundColor: \"var(--dark-square)\" }}\n        customLightSquareStyle={{ backgroundColor: \"var(--light-square)\" }}\n      />\n    </div>\n  );\n};\n\nexport default ChessboardComponent;","import React, { useState, useRef, useEffect } from \"react\";\nimport { Chess } from \"chess.js\";\nimport Clocks from \"./Clocks\";\nimport MoveHistory from \"./MoveHistory\";\nimport Settings from \"./Settings\";\nimport { saveGameToStorage, loadGameFromStorage } from \"../utils/storage\";\nimport playSound from \"../utils/soundUtils\";\nimport \"../styles/ChessGame.css\"; \nimport \"../styles/global.css\";\nimport ChessboardComponent from \"./ChessboardComponent\";\nimport { getMoveType } from \"../utils/helpers\";\n\nconst ChessGame = () => {\n  const gameRef = useRef(new Chess());\n  const [position, setPosition] = useState(gameRef.current.fen());\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [whiteTime, setWhiteTime] = useState(600);\n  const [blackTime, setBlackTime] = useState(600);\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [lastMove, setLastMove] = useState(null);\n  const [theme, setTheme] = useState(localStorage.getItem(\"chessTheme\") || \"classic\");\n  const [enableSound, setEnableSound] = useState(true);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  // Load game state from localStorage\n  useEffect(() => {\n    async function fetchData() {\n      // (gameRef, setPosition, setMoveHistory, setWhiteTime, setBlackTime)\n      await loadGameFromStorage(gameRef, setPosition, setMoveHistory, setWhiteTime, setBlackTime, setTheme);\n      setIsWhiteTurn(gameRef.current.turn() === \"w\");  // ✅ Update isWhiteTurn based on actual turn\n      setIsLoaded(true); // ✅ Only after loading is complete\n    }\n    fetchData();\n  }, []);\n\n  // Save game state on updates (Only after loading is complete)\n  useEffect(() => {\n    if (!isLoaded) return;  // ✅ Prevent saving before loading is done\n    // (fen, moveHistory, whiteTime, blackTime)\n    saveGameToStorage(gameRef.current.fen(), moveHistory, whiteTime, blackTime, theme);\n  }, [position, moveHistory, whiteTime, blackTime, theme, isLoaded]); \n\n  // Timer Logic\n  useEffect(() => {\n    if (!gameStarted) return;\n    const timer = setInterval(() => {\n      setIsWhiteTurn(gameRef.current.turn() === \"w\");\n      gameRef.current.turn() === \"w\"\n        ? setWhiteTime((prev) => Math.max(prev - 1, 0))\n        : setBlackTime((prev) => Math.max(prev - 1, 0));\n    }, 1000);\n    return () => clearInterval(timer);\n  }, [gameStarted, position]);\n\n  // Handle piece movement\n  const handleMove = ({ from, to }) => {\n    try {\n      const move = gameRef.current.move({ from, to, promotion: \"q\" });\n      if (!move) return;\n\n      if (!gameStarted) setGameStarted(true);\n      setPosition(gameRef.current.fen());\n      setMoveHistory((prev) => [...prev, move.san]);\n      setLastMove({ from, to });\n      playSound(getMoveType(move, gameRef.current), enableSound);\n    } catch (error) {\n      console.warn(\"Invalid move:\", error);\n    }\n  };\n\n  return (\n    <div className={`chess-container ${theme}-theme`}>\n      <Settings theme={theme} setTheme={setTheme} enableSound={enableSound} setEnableSound={setEnableSound} />\n      <Clocks whiteTime={whiteTime} blackTime={blackTime} isWhiteTurn={isWhiteTurn} />\n      <ChessboardComponent position={position} handleMove={handleMove} lastMove={lastMove} />\n      <MoveHistory moveHistory={moveHistory} />\n    </div>\n  );\n};\n\nexport default ChessGame;","const chessGameKey = \"chessGame\"\n\nexport const saveGameToStorage = (fen, moveHistory, whiteTime, blackTime, theme) => {\n    const gameData = {\n      fen,\n      moveHistory,\n      whiteTime,\n      blackTime,\n      theme,\n    };\n    localStorage.setItem(chessGameKey, JSON.stringify(gameData));\n  };\n  \n  export const loadGameFromStorage = (gameRef, setPosition, setMoveHistory, setWhiteTime, setBlackTime, setTheme) => {\n    const savedGame = localStorage.getItem(chessGameKey);\n    if (!savedGame) return; // No saved game, exit early\n  \n    try {\n        const gameData = JSON.parse(savedGame);\n        gameRef.current.load(gameData.fen); // ✅ Load saved FEN into the chess.js instance\n        setPosition(gameData.fen); // ✅ Update board position in React state\n        setMoveHistory(gameData.moveHistory || []); // ✅ Restore move history\n        setWhiteTime(gameData.whiteTime || 600); // ✅ Restore timer values\n        setBlackTime(gameData.blackTime || 600);\n        setTheme(gameData.theme)\n    } catch (error) {\n        console.error(\"Error parsing JSON from localStorage:\", error);\n        localStorage.removeItem(chessGameKey); // 🔥 Clear corrupted data to prevent errors\n    }\n  };\n  ","export const getMoveType = (move, game) => {\n    if (move.flags.includes(\"c\")) {\n        return \"capture\"\n    } \n    if (game.isCheckmate()) {\n        return \"checkmate\"\n    } \n    if (game.inCheck()) {\n        return \"check\"\n    } \n    return \"move\"\n}","import React from \"react\";\nimport ChessGame from \"./components/ChessGame\";\nimport \"./styles/global.css\"; // Global styles\n\nconst App = () => {\n  return (\n    <div className=\"app-container\">\n      <h1 className=\"app-title\">Chess Game</h1>\n      <ChessGame />\n    </div>\n  );\n};\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}