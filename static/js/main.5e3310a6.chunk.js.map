{"version":3,"sources":["sounds/capture-move.mp3","sounds/normal-move.mp3","sounds/wrong.mp3","config.js","context/configContext.js","components/Clocks.js","components/MoveHistory.js","utils/soundUtils.js","components/ChessboardComponent.js","components/Settings.js","components/TopBar.js","components/TopContainer.js","components/ChessGame.js","utils/storage.js","utils/helpers.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","CONFIG","TIMER_DURATION","THEME","ENABLE_SOUND","IS_FLIPPED","THEME_KEY","ENABLE_SOUND_KEY","TIMER_DURATION_KEY","IS_FLIPPED_KEY","CHESS_GAME_KEY","ConfigContext","createContext","ConfigProvider","_ref","children","getStoredConfig","key","defaultValue","storedValue","localStorage","getItem","JSON","parse","theme","setTheme","useState","enableSound","setEnableSound","timerDuration","setTimerDuration","isFlipped","setIsFlipped","useEffect","setItem","stringify","React","createElement","Provider","value","Clocks","whiteTime","blackTime","isWhiteTurn","className","Fragment","MoveHistory","moveHistory","scrollRef","useRef","current","scrollTop","scrollHeight","ref","map","move","index","Math","floor","playSound","type","sound","Audio","moveSound","checkmateSound","wrongSound","play","ChessboardComponent","position","handleMove","lastMove","Chessboard","onPieceDrop","source","target","from","to","boardOrientation","customSquareStyles","backgroundColor","customDarkSquareStyle","customLightSquareStyle","Settings","isOpen","setIsOpen","settingsRef","handleClickOutside","event","contains","document","addEventListener","removeEventListener","onClick","toggleDropdown","prev","onChange","e","checked","TopBar","resetGame","flipBoard","TopContainer","ChessGame","gameRef","Chess","useContext","setPosition","fen","setMoveHistory","setWhiteTime","setBlackTime","gameStarted","setGameStarted","setLastMove","isLoaded","setIsLoaded","gameOver","setGameOver","gameResult","setGameResult","async","loadGameFromStorage","savedGame","gameData","load","error","console","removeItem","fetchData","saveGameToStorage","timer","setInterval","turn","prevWhiteTime","clearInterval","prevBlackTime","resetGameHandler","reset","promotion","san","getMoveType","game","flags","includes","isCheckmate","inCheck","checkGameOver","isDraw","warn","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.5e3310a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/capture-move.a2b149c4.mp3\";","module.exports = __webpack_public_path__ + \"static/media/normal-move.d9502a4d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/wrong.9ee53a8d.mp3\";","const CONFIG = {\n    TIMER_DURATION: 300, // 10 minutes per player\n    THEME: \"classic\",\n    ENABLE_SOUND: true,\n    IS_FLIPPED: false,\n    THEME_KEY: \"theme\",\n    ENABLE_SOUND_KEY: \"enableSound\", \n    TIMER_DURATION_KEY: \"timerDuration\",\n    IS_FLIPPED_KEY: \"isFlipped\",\n    CHESS_GAME_KEY: \"chessGame\"\n  };\n  \n  export default CONFIG;","import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport CONFIG from \"../config\";\n\nconst ConfigContext = createContext();\n\nexport const ConfigProvider = ({ children }) => {\n\n   // Load settings from LocalStorage (or use defaults)\n   const getStoredConfig = (key, defaultValue) => {\n    const storedValue = localStorage.getItem(key);\n    return storedValue !== null ? JSON.parse(storedValue) : defaultValue;\n  };\n\n   const [theme, setTheme] = useState(() => getStoredConfig(CONFIG.THEME_KEY, CONFIG.THEME));\n   const [enableSound, setEnableSound] = useState(() => getStoredConfig(CONFIG.ENABLE_SOUND_KEY, CONFIG.ENABLE_SOUND));\n   const [timerDuration, setTimerDuration] = useState(() => getStoredConfig(CONFIG.TIMER_DURATION_KEY, CONFIG.TIMER_DURATION))\n   const [isFlipped, setIsFlipped] = useState(() => getStoredConfig(CONFIG.IS_FLIPPED_KEY, CONFIG.IS_FLIPPED));\n\n    // Save settings to LocalStorage when they change\n    useEffect(() => localStorage.setItem(CONFIG.THEME_KEY, JSON.stringify(theme)), [theme]);\n    useEffect(() => localStorage.setItem(CONFIG.ENABLE_SOUND_KEY, JSON.stringify(enableSound)), [enableSound]);\n    useEffect(() => localStorage.setItem(CONFIG.TIMER_DURATION_KEY, JSON.stringify(timerDuration)), [timerDuration]);\n    useEffect(() => localStorage.setItem(CONFIG.IS_FLIPPED_KEY, JSON.stringify(isFlipped)), [isFlipped]);\n\n\n  return (\n    <ConfigContext.Provider value={{ theme, setTheme, enableSound, setEnableSound , timerDuration, setTimerDuration, isFlipped, setIsFlipped}}>\n      {children}\n    </ConfigContext.Provider>\n  );\n};\n\nexport const useConfig = () => useContext(ConfigContext);","import React from \"react\";\nimport \"../styles/components/clock.css\" \n\nconst Clocks = ({ whiteTime, blackTime, isWhiteTurn , isFlipped}) => {\n  return (\n    <div className=\"left-panel\">\n    <div className=\"clocks-container\">\n     {isFlipped ? (\n        <>\n          <div className={`clock ${isWhiteTurn ? \"active-turn\" : \"\"}`}>⚪ {whiteTime}</div>\n          <div className={`clock ${!isWhiteTurn ? \"active-turn\" : \"\"}`}>⚫ {blackTime}</div>\n        </>\n      ) : (\n        <>\n          <div className={`clock ${!isWhiteTurn ? \"active-turn\" : \"\"}`}>⚫ {blackTime}</div>\n          <div className={`clock ${isWhiteTurn ? \"active-turn\" : \"\"}`}>⚪ {whiteTime}</div>\n        </>\n      )}\n    </div>\n    </div>\n  );\n};\n\nexport default Clocks;\n","import React, { useEffect, useRef } from \"react\";\nimport \"../styles/components/moveHistory.css\";\n\nconst MoveHistory = ({ moveHistory }) => {\n  const scrollRef = useRef(null);\n\n  // Auto-scroll to the latest move\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [moveHistory]);\n\n  return (\n      <div className=\"move-history\">\n        <h3>Move History</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>White</th>\n              <th>Black</th>\n            </tr>\n          </thead>\n          <tbody ref={scrollRef}> {/* Attach ref to tbody */}\n            {moveHistory.map((move, index) =>\n              index % 2 === 0 ? ( // Every even index is a new move row\n                <tr key={index / 2}>\n                  <td>{Math.floor(index / 2) + 1}.</td>\n                  <td>{move}</td>\n                  <td>{moveHistory[index + 1] || \"\"}</td> {/* Handle missing black moves */}\n                </tr>\n              ) : null // Skip rendering odd indices separately\n            )}\n          </tbody>\n        </table>\n      </div>\n  );\n};\n\nexport default MoveHistory;\n","// utils/soundUtils.js\nimport moveSound from \"../sounds/normal-move.mp3\";\nimport captureSound from \"../sounds/capture-move.mp3\";\nimport checkSound from \"../sounds/capture-move.mp3\";\nimport checkmateSound from \"../sounds/capture-move.mp3\";\nimport wrongSound from \"../sounds/wrong.mp3\";\n\nconst playSound = (type) => {\n  let sound;\n  switch (type) {\n    case \"move\":\n      sound = new Audio(moveSound);\n      break;\n    case \"capture\":\n      sound = new Audio(captureSound);\n      break;\n    case \"check\":\n      sound = new Audio(checkSound);\n      break;\n    case \"checkmate\":\n      sound = new Audio(checkmateSound);\n      break;\n    case \"wrong\":\n      sound = new Audio(wrongSound);\n      break;\n    default:\n      return;\n  }\n  sound.play();\n};\n\nexport default playSound;","import React from \"react\";\nimport { Chessboard } from \"react-chessboard\";\nimport \"../styles/themes.css\"\n\nconst ChessboardComponent = ({ position, handleMove, lastMove , isFlipped}) => {\n  const getSquareStyles = () => {\n    if (!lastMove) return {};\n    return {\n      [lastMove.from]: { backgroundColor: \"var(--last-move-from)\" },\n      [lastMove.to]: { backgroundColor: \"var(--last-move-to)\" },\n    };\n  };\n\n  return (\n    <div className=\"chess-board\">\n      <Chessboard\n        position={position}\n        onPieceDrop={(source, target) => handleMove({ from: source, to: target })}\n        boardOrientation={isFlipped ? \"black\" : \"white\"}\n        // boardWidth={window.innerHeight * 0.8}\n        // customBoardStyle={{ maxWidth: \"80vw\" }}\n        customSquareStyles={getSquareStyles()}\n        customDarkSquareStyle={{ backgroundColor: \"var(--dark-square)\" }}\n        customLightSquareStyle={{ backgroundColor: \"var(--light-square)\" }}\n      />\n    </div>\n  );\n};\n\nexport default ChessboardComponent;","import React, { useState, useRef, useEffect } from \"react\";\nimport \"../styles/components/settings.css\";\n\nconst Settings = ({ theme, setTheme, enableSound, setEnableSound }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const settingsRef = useRef(null);\n\n  // Toggle dropdown visibility\n  const toggleDropdown = () => setIsOpen((prev) => !prev);\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (settingsRef.current && !settingsRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  return (\n    <div className=\"settings-container\" ref={settingsRef}>\n      <button className=\"settings-button\" onClick={toggleDropdown}>\n        ⚙ Settings\n      </button>\n\n      {isOpen && (\n        <div className=\"settings-dropdown\">\n          <div className=\"dropdown-item\">\n            <h4>Theme:</h4>\n            <select onChange={(e) => setTheme(e.target.value)} value={theme}>\n              <option value=\"default\">Default</option>\n              <option value=\"classic\">Classic</option>\n              <option value=\"wood\">Wood</option>\n              <option value=\"marble\">Marble</option>\n              <option value=\"dark\">Dark Mode</option>\n            </select>\n          </div>\n          <div className=\"dropdown-item\">\n            <label>\n              <input type=\"checkbox\" checked={enableSound} onChange={(e) => setEnableSound(e.target.checked)} />\n              Enable Move Sound\n            </label>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Settings;\n","import React from \"react\";\nimport \"../styles/topContainer.css\"; // Add styles for the top bar\nimport Settings from \"./Settings\";\n\nconst TopBar = ({ resetGame, flipBoard, isFlipped}) => {\n  return (\n        <div className=\"top-bar\">\n            <button onClick={resetGame} className=\"action-button\">Reset Board</button>\n            <button onClick={flipBoard}className=\"action-button\">{isFlipped ? \"Unflip Board\" : \"Flip Board\"}</button>\n        </div>\n  );\n};\n\nexport default TopBar;","import React from \"react\";\nimport \"../styles/topContainer.css\"; // Add styles for the top bar\nimport Settings from \"./Settings\";\nimport TopBar from \"./TopBar\";\n\nconst TopContainer = ({ resetGame, flipBoard, isFlipped, theme, setTheme, enableSound, setEnableSound}) => {\n  return (\n    <div className=\"top-container\">\n        <TopBar resetGame={resetGame} flipBoard={flipBoard} isFlipped={isFlipped}/>\n        <Settings theme={theme} setTheme={setTheme} enableSound={enableSound} setEnableSound={setEnableSound} />\n    </div>\n  );\n};\n\nexport default TopContainer;","import React, { useState, useRef, useEffect } from \"react\";\nimport CONFIG from \"../config\";\nimport { useConfig } from \"../context/configContext\";\nimport { Chess } from \"chess.js\";\nimport Clocks from \"./Clocks\";\nimport MoveHistory from \"./MoveHistory\";\nimport { saveGameToStorage, loadGameFromStorage } from \"../utils/storage\";\nimport playSound from \"../utils/soundUtils\";\nimport ChessboardComponent from \"./ChessboardComponent\";\nimport { getMoveType, resetGame , checkGameOver} from \"../utils/helpers\";\nimport TopContainer from \"./TopContainer\";\nimport \"../styles/global.css\";\nimport \"../styles/pageLayout.css\"\nimport \"../styles/topContainer.css\"\n\nconst ChessGame = () => {\n  const gameRef = useRef(new Chess());\n  // User Controlled Context Variables.\n  const { theme, setTheme, enableSound, setEnableSound, timerDuration, setTimerDuration, isFlipped, setIsFlipped} = useConfig();\n  const [position, setPosition] = useState(gameRef.current.fen());\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [whiteTime, setWhiteTime] = useState(timerDuration);\n  const [blackTime, setBlackTime] = useState(timerDuration);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [lastMove, setLastMove] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameResult, setGameResult] = useState(\"\");\n\n  // Flip Board\n  const flipBoard = () => setIsFlipped((prev) => !prev);\n\n  // Load game state from localStorage\n  useEffect(() => {\n    async function fetchData() {\n      // (gameRef, setPosition, setMoveHistory, setWhiteTime, setBlackTime, setTheme)\n      await loadGameFromStorage(gameRef, setPosition, setMoveHistory, setWhiteTime, setBlackTime);\n      setIsLoaded(true); // ✅ Only after loading is complete\n    }\n    fetchData();\n  }, []);\n\n  // Save game state on updates (Only after loading is complete)\n  useEffect(() => {\n    if (!isLoaded) return;  // ✅ Prevent saving before loading is done\n    // (fen, moveHistory, whiteTime, blackTime)\n    saveGameToStorage(gameRef.current.fen(), moveHistory, whiteTime, blackTime);\n  }, [position, moveHistory, whiteTime, blackTime, isLoaded]); \n\n  // Timer Logic\n  useEffect(() => {\n    if (!gameStarted || gameOver) return;\n\n    const timer = setInterval(() => {\n      gameRef.current.turn() === \"w\"\n        ? setWhiteTime((prevWhiteTime) => {\n          if (prevWhiteTime <= 1) {\n            setGameResult(\"Black Won by Time\");\n            setGameOver(true);\n            clearInterval(timer); // Stop timer\n            return 0; // Ensure whiteTime does not go negative\n          }\n          return prevWhiteTime - 1;\n        })\n        : setBlackTime((prevBlackTime) => {\n          if (prevBlackTime <= 1) {\n            setGameResult(\"White Won by Time\");\n            setGameOver(true);\n            clearInterval(timer); // Stop timer\n            return 0; // Ensure blackTime does not go negative\n          }\n          return prevBlackTime - 1;\n        });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [gameStarted, position, gameOver]);\n\n  // Handle piece movement\n  const handleMove = ({ from, to }) => {\n    if (gameOver) return; // Prevent moves after game over\n    try {\n      const move = gameRef.current.move({ from, to, promotion: \"q\" });\n      if (!move) return;\n\n      if (!gameStarted) setGameStarted(true);\n      setPosition(gameRef.current.fen());\n      setMoveHistory((prev) => [...prev, move.san]);\n      setLastMove({ from, to });\n      if (enableSound) {\n        playSound(getMoveType(move, gameRef.current));\n      }\n      // gameRef, whiteTime, blackTime, setGameOver, setGameResult)\n      checkGameOver(gameRef, whiteTime, blackTime, setGameOver, setGameResult); // Check if game ended after this move\n    } catch (error) {\n      console.warn(\"Invalid move:\", error);\n    }\n  };\n\n  const resetGameHandler = () => {\n    gameRef.current.reset();\n    setPosition(gameRef.current.fen());\n    setMoveHistory([]);\n    setWhiteTime(120);\n    setBlackTime(120);\n    setGameStarted(false);\n    setGameOver(false);\n    setGameResult(\"\");\n    setLastMove(null)\n  };\n  \n\n  return (\n    <div className=\"main-container\">\n      <TopContainer\n        resetGame={resetGameHandler}\n        flipBoard={flipBoard}\n        isFlipped={isFlipped}\n        theme={theme}\n        setTheme={setTheme}\n        enableSound={enableSound}\n        setEnableSound={setEnableSound}\n      />\n      <div className=\"middle-container\">\n        <div className=\"left-menu-bar\">\n        </div>\n        <div className={`chess-container ${theme}-theme`}>\n          <div className=\"left-panel\"> \n            <Clocks whiteTime={whiteTime} blackTime={blackTime} isWhiteTurn={gameRef.current.turn() === \"w\"} isFlipped={isFlipped}/>\n          </div>\n          <div className=\"centre-area\">\n            <ChessboardComponent position={position} handleMove={handleMove} lastMove={lastMove} isFlipped={isFlipped}/>\n            {gameOver && <div className=\"game-over-overlay\"><div className=\"game-over-message\">\n              <p>\n              {gameResult}\n              </p>\n              <button className=\"restart-button\" onClick={resetGameHandler}>Restart Game</button>\n              </div></div>}\n          </div>\n          <div className=\"right-panel\">\n            <MoveHistory moveHistory={moveHistory} />\n          </div>\n        </div>\n        <div className=\"ad-banner\"></div>\n      </div>\n      <div className=\"bottom-container\">\n      </div>\n      </div>\n  );\n};\nexport default ChessGame;","import CONFIG from \"../config\";\n\nexport const saveGameToStorage = (fen, moveHistory, whiteTime, blackTime) => {\n    const gameData = {\n      fen,\n      moveHistory,\n      whiteTime,\n      blackTime,\n    };\n    localStorage.setItem(CONFIG.CHESS_GAME_KEY, JSON.stringify(gameData));\n  };\n  \n  export const loadGameFromStorage = (gameRef, setPosition, setMoveHistory, setWhiteTime, setBlackTime) => {\n    const savedGame = localStorage.getItem(CONFIG.CHESS_GAME_KEY);\n    if (!savedGame) return; // No saved game, exit early\n  \n    try {\n        const gameData = JSON.parse(savedGame);\n        gameRef.current.load(gameData.fen); // ✅ Load saved FEN into the chess.js instance\n        setPosition(gameData.fen); // ✅ Update board position in React state\n        setMoveHistory(gameData.moveHistory || []); // ✅ Restore move history\n        setWhiteTime(gameData.whiteTime || CONFIG.TIMER_DURATION); // ✅ Restore timer values\n        setBlackTime(gameData.blackTime || CONFIG.TIMER_DURATION);\n    } catch (error) {\n        console.error(\"Error parsing JSON from localStorage:\", error);\n        localStorage.removeItem(CONFIG.CHESS_GAME_KEY); // 🔥 Clear corrupted data to prevent errors\n    }\n  };\n  ","export const getMoveType = (move, game) => {\n    if (move.flags.includes(\"c\")) {\n        return \"capture\"\n    } \n    if (game.isCheckmate()) {\n        return \"checkmate\"\n    } \n    if (game.inCheck()) {\n        return \"check\"\n    } \n    return \"move\"\n}\n\n  // Reset Game\n export const resetGame = (gameRef, setPosition, setMoveHistory) => {\n    gameRef.current.reset();\n    setPosition(gameRef.current.fen());\n    setMoveHistory([]);\n  };\n\n  // Handle Game Over\nexport const checkGameOver = (gameRef, whiteTime, blackTime, setGameOver, setGameResult) => {\n        if (gameRef.current.isCheckmate()) {\n          setGameOver(true);\n          setGameResult(gameRef.current.turn() === \"w\" ? \"Black Wins by Checkmate!\" : \"White Wins by Checkmate!\");\n        } else if (gameRef.current.isDraw()) {\n          setGameOver(true);\n          setGameResult(\"Game Drawn!\");\n        } else if (whiteTime === 0) {\n          setGameOver(true);\n          setGameResult(\"Black Wins on Time!\");\n        } else if (blackTime === 0) {\n          setGameOver(true);\n          setGameResult(\"White Wins on Time!\");\n        }\n      };","import React from \"react\";\nimport ChessGame from \"./components/ChessGame\";\nimport { ConfigProvider } from \"./context/configContext\";\n\nconst App = () => {\n  return (\n    <ConfigProvider>\n      <ChessGame/>\n    </ConfigProvider>\n  );\n};\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}