{"version":3,"sources":["sounds/capture.mp3","sounds/move.mp3","sounds/wrong.mp3","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ChessGame","gameRef","useRef","Chess","position","setPosition","useState","current","fen","moveHistory","setMoveHistory","invalidMove","setInvalidMove","whiteTime","setWhiteTime","blackTime","setBlackTime","isWhiteTurn","setIsWhiteTurn","gameStarted","setGameStarted","lastMove","setLastMove","theme","setTheme","localStorage","getItem","showSettings","setShowSettings","enableSound","setEnableSound","useEffect","setItem","timer","setInterval","turn","prev","clearInterval","playSound","type","sound","Audio","moveSound","checkmateSound","play","React","createElement","className","onClick","onChange","e","target","value","checked","Chessboard","onPieceDrop","source","_ref","from","to","game","console","log","move","promotion","isCheckmate","isDraw","san","flags","includes","inCheck","error","wrongSound","warn","setTimeout","handleMove","boardWidth","customSquareStyles","backgroundColor","boardStyle","borderRadius","boxShadow","customDarkSquareStyle","customLightSquareStyle","map","index","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App"],"mappings":"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","file":"static/js/main.64974f9f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/capture.16a09c1c.mp3\";","module.exports = __webpack_public_path__ + \"static/media/move.86644655.mp3\";","module.exports = __webpack_public_path__ + \"static/media/wrong.9ee53a8d.mp3\";","import React, { useState, useRef , useEffect} from \"react\";\nimport { Chess } from \"chess.js\";\nimport { Chessboard } from \"react-chessboard\";\nimport \"./styles/ChessGame.css\"; // Import CSS file\nimport \"./styles/themes.css\"; // Import CSS file\nimport moveSound from \"./sounds/move.mp3\";\nimport captureSound from \"./sounds/capture.mp3\";\nimport checkSound from \"./sounds/capture.mp3\";\nimport checkmateSound from \"./sounds/capture.mp3\";\nimport wrongSound from \"./sounds/wrong.mp3\"\n\nconst ChessGame = () => {\n  const gameRef = useRef(new Chess()); // Persist game instance\n  const [position, setPosition] = useState(gameRef.current.fen());\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [invalidMove, setInvalidMove] = useState(false);\n  const [whiteTime, setWhiteTime] = useState(600); // 10-minute timer\n  const [blackTime, setBlackTime] = useState(600);\n  const [isWhiteTurn, setIsWhiteTurn] = useState(true); // Track whose turn it is\n  const [gameStarted, setGameStarted] = useState(false); // Track if the game has started\n  const [lastMove, setLastMove] = useState(null); // Store last move\n  const [theme, setTheme] =  useState(localStorage.getItem(\"chessTheme\") || \"classic\");     // Load theme from localStorage or use default \"classic\"\n  const [showSettings, setShowSettings] = useState(false);\n  const [enableSound, setEnableSound] = useState(true);\n\n    // Save theme to localStorage whenever it changes\n    useEffect(() => {\n      localStorage.setItem(\"chessTheme\", theme);\n    }, [theme]);\n\n  useEffect(() => {\n    if (!gameStarted) return; // If the game hasn't started, don't run the timer\n\n    const timer = setInterval(() => {\n      if (gameRef.current.turn() === \"w\") {\n        setIsWhiteTurn(true);\n        setWhiteTime((prev) => (prev > 0 ? prev - 1 : 0));\n      } else {\n        setIsWhiteTurn(false);\n        setBlackTime((prev) => (prev > 0 ? prev - 1 : 0));\n      }\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [gameStarted, position]); // Depend on game start and position updates\n\n  const handleMove = ({ from, to }) => {\n    const game = gameRef.current; // Ensure we're using the correct instance\n    console.log(`Attempting move: ${from} to ${to}`);\n    try {\n    const move = game.move({ from, to, promotion: \"q\" });\n\n    console.log(\"Valid move:\", move); // 🔍 Log successful move\n    setInvalidMove(false);\n   \n    // Refresh game state\n    // gameRef.current = new Chess(game.fen()); \n\n      \n      if (!gameStarted) {\n        setGameStarted(true); // Start the game on the first move\n      }\n\n      // Check if the game has ended\n      if (game.isCheckmate()) {\n        console.log(\"Checkmate! Game Over.\");\n      } else if (game.isDraw()) {\n        console.log(\"Draw! Game Over.\");\n      }\n      setPosition(game.fen());\n      setMoveHistory((prev) => [...prev, move.san]); // Append move\n      setLastMove({ from, to }); // Store last move squares\n      // setTurn(game.turn()); // Update turn ('w' or 'b')\n      if (move.flags.includes(\"c\")) {\n        playSound(\"capture\");\n      } else if (game.isCheckmate()) {\n        playSound(\"checkmate\");\n      } else if (game.inCheck()) {\n        playSound(\"check\");\n      } else {\n        playSound(\"move\");\n      }\n    }catch(error) {\n      var wrong = new Audio(wrongSound);\n      wrong.play()\n      console.warn(\"Invalid move detected:\", { from, to });\n      console.error(\"Error making move:\", error);\n      setInvalidMove(true);\n      setTimeout(() => setInvalidMove(false), 1000);\n    }\n  };\n\n    // Generate square styles for highlighting last move\n    const getSquareStyles = () => {\n      if (!lastMove) return {};\n      return {\n        [lastMove.from]: { backgroundColor: \"rgba(255, 255, 0, 0.5)\" }, // Light Yellow\n        [lastMove.to]: { backgroundColor: \"rgba(0, 255, 0, 0.5)\" }, // Light Green\n      };\n    };\n\n    const playSound = (type) => {\n      if (!enableSound) return;\n      let sound;\n      switch (type) {\n        case \"move\":\n          sound = new Audio(moveSound);\n          break;\n        case \"capture\":\n          sound = new Audio(captureSound);\n          break;\n        case \"check\":\n          sound = new Audio(checkSound);\n          break;\n        case \"checkmate\":\n          sound = new Audio(checkmateSound);\n          break;\n        default:\n          return;\n      }\n      sound.play();\n    };\n\n  return (\n      <div className={`chess-container ${theme}-theme`}>\n {/* Settings Dropdown */}\n{/* Settings Button */}\n<div className=\"settings\">\n<button className=\"settings-button\" onClick={() => setShowSettings(!showSettings)}>\n    ⚙ Settings\n  </button>\n  {showSettings && (\n    <div className=\"settings-menu\">\n      <h4>Select Theme:</h4>\n      <select\n        onChange={(e) => {\n          setTheme(e.target.value); // Change theme\n          setShowSettings(false); // Auto-hide dropdown\n        }}\n        value={theme}\n      >\n        <option value=\"classic\">Classic</option>\n        <option value=\"wood\">Wood</option>\n        <option value=\"marble\">Marble</option>\n        <option value=\"dark\">Dark Mode</option>\n      </select>\n      <label>\n              <input\n                type=\"checkbox\"\n                checked={enableSound}\n                onChange={(e) => setEnableSound(e.target.checked)}\n              />\n              Enable Move Sound\n            </label>\n    </div>\n  )}\n      </div>\n\n       {/* Left Panel: Clocks */}\n       <div className=\"left-panel\">\n        <div className={`clock ${!isWhiteTurn ? \"active-turn\" : \"\"}`}>♚ {blackTime}s</div>\n        <div className={`clock ${isWhiteTurn ? \"active-turn\" : \"\"}`}>♔ {whiteTime}s</div>\n      </div>\n\n\n      {/* Center Panel: Chessboard */}\n      <div className=\"chess-board\">\n        <Chessboard\n          position={position}\n          onPieceDrop={(source, target) => handleMove({ from: source, to: target })}\n          boardWidth={500}\n          customSquareStyles={getSquareStyles()} // Apply highlight styles\n          boardStyle={{\n            borderRadius: \"10px\",\n            boxShadow: \"0 2px 10px rgba(0,0,0,0.2)\",\n          }}\n          customDarkSquareStyle={{ backgroundColor: \"var(--dark-square)\" }}\n          customLightSquareStyle={{ backgroundColor: \"var(--light-square)\" }}\n        />\n        {/* Show invalid move message */}\n        {/* {invalidMove && <p className=\"invalid-move\">Invalid move!</p>} */}\n      </div>\n\n      {/* Right Panel: Move History */}\n      <div className=\"right-panel\">\n        <div className=\"move-history\">\n          <h3>Move History</h3>\n          <ol>\n            {moveHistory.map((move, index) => (\n              <li key={index}>{move}</li>\n            ))}\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChessGame;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}