{"version":3,"sources":["sounds/capture-move.mp3","sounds/normal-move.mp3","sounds/wrong.mp3","components/Clocks.js","components/MoveHistory.js","utils/soundUtils.js","components/ChessboardComponent.js","components/Settings.js","components/TopBar.js","components/TopContainer.js","components/ChessGame.js","utils/storage.js","utils/helpers.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Clocks","_ref","whiteTime","blackTime","isWhiteTurn","isFlipped","React","createElement","className","Fragment","MoveHistory","moveHistory","scrollRef","useRef","useEffect","current","scrollTop","scrollHeight","ref","map","move","index","key","Math","floor","playSound","type","sound","Audio","moveSound","checkmateSound","wrongSound","play","ChessboardComponent","position","handleMove","lastMove","Chessboard","onPieceDrop","source","target","from","to","boardOrientation","customSquareStyles","backgroundColor","customDarkSquareStyle","customLightSquareStyle","Settings","theme","setTheme","enableSound","setEnableSound","isOpen","setIsOpen","useState","settingsRef","handleClickOutside","event","contains","document","addEventListener","removeEventListener","onClick","toggleDropdown","prev","onChange","e","value","checked","TopBar","resetGame","flipBoard","TopContainer","ChessGame","gameRef","Chess","setPosition","fen","setMoveHistory","setWhiteTime","setBlackTime","gameStarted","setGameStarted","setLastMove","localStorage","getItem","isLoaded","setIsLoaded","setIsFlipped","gameOver","setGameOver","gameResult","setGameResult","async","loadGameFromStorage","savedGame","gameData","JSON","parse","load","error","console","removeItem","fetchData","saveGameToStorage","setItem","stringify","timer","setInterval","turn","prevWhiteTime","clearInterval","prevBlackTime","resetGameHandler","reset","promotion","san","getMoveType","game","flags","includes","isCheckmate","inCheck","checkGameOver","isDraw","warn","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.4d18a55f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/capture-move.a2b149c4.mp3\";","module.exports = __webpack_public_path__ + \"static/media/normal-move.d9502a4d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/wrong.9ee53a8d.mp3\";","import React from \"react\";\nimport \"../styles/components/clock.css\" \n\nconst Clocks = ({ whiteTime, blackTime, isWhiteTurn , isFlipped}) => {\n  return (\n    <div className=\"left-panel\">\n    <div className=\"clocks-container\">\n     {isFlipped ? (\n        <>\n          <div className={`clock ${isWhiteTurn ? \"active-turn\" : \"\"}`}>⚪ {whiteTime}</div>\n          <div className={`clock ${!isWhiteTurn ? \"active-turn\" : \"\"}`}>⚫ {blackTime}</div>\n        </>\n      ) : (\n        <>\n          <div className={`clock ${!isWhiteTurn ? \"active-turn\" : \"\"}`}>⚫ {blackTime}</div>\n          <div className={`clock ${isWhiteTurn ? \"active-turn\" : \"\"}`}>⚪ {whiteTime}</div>\n        </>\n      )}\n    </div>\n    </div>\n  );\n};\n\nexport default Clocks;\n","import React, { useEffect, useRef } from \"react\";\nimport \"../styles/components/moveHistory.css\";\n\nconst MoveHistory = ({ moveHistory }) => {\n  const scrollRef = useRef(null);\n\n  // Auto-scroll to the latest move\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [moveHistory]);\n\n  return (\n      <div className=\"move-history\">\n        <h3>Move History</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>White</th>\n              <th>Black</th>\n            </tr>\n          </thead>\n          <tbody ref={scrollRef}> {/* Attach ref to tbody */}\n            {moveHistory.map((move, index) =>\n              index % 2 === 0 ? ( // Every even index is a new move row\n                <tr key={index / 2}>\n                  <td>{Math.floor(index / 2) + 1}.</td>\n                  <td>{move}</td>\n                  <td>{moveHistory[index + 1] || \"\"}</td> {/* Handle missing black moves */}\n                </tr>\n              ) : null // Skip rendering odd indices separately\n            )}\n          </tbody>\n        </table>\n      </div>\n  );\n};\n\nexport default MoveHistory;\n","// utils/soundUtils.js\nimport moveSound from \"../sounds/normal-move.mp3\";\nimport captureSound from \"../sounds/capture-move.mp3\";\nimport checkSound from \"../sounds/capture-move.mp3\";\nimport checkmateSound from \"../sounds/capture-move.mp3\";\nimport wrongSound from \"../sounds/wrong.mp3\";\n\nconst playSound = (type) => {\n  let sound;\n  switch (type) {\n    case \"move\":\n      sound = new Audio(moveSound);\n      break;\n    case \"capture\":\n      sound = new Audio(captureSound);\n      break;\n    case \"check\":\n      sound = new Audio(checkSound);\n      break;\n    case \"checkmate\":\n      sound = new Audio(checkmateSound);\n      break;\n    case \"wrong\":\n      sound = new Audio(wrongSound);\n      break;\n    default:\n      return;\n  }\n  sound.play();\n};\n\nexport default playSound;","import React from \"react\";\nimport { Chessboard } from \"react-chessboard\";\nimport \"../styles/themes.css\"\n\nconst ChessboardComponent = ({ position, handleMove, lastMove , isFlipped}) => {\n  const getSquareStyles = () => {\n    if (!lastMove) return {};\n    return {\n      [lastMove.from]: { backgroundColor: \"var(--last-move-from)\" },\n      [lastMove.to]: { backgroundColor: \"var(--last-move-to)\" },\n    };\n  };\n\n  return (\n    <div className=\"chess-board\">\n      <Chessboard\n        position={position}\n        onPieceDrop={(source, target) => handleMove({ from: source, to: target })}\n        boardOrientation={isFlipped ? \"black\" : \"white\"}\n        // boardWidth={window.innerHeight * 0.8}\n        // customBoardStyle={{ maxWidth: \"80vw\" }}\n        customSquareStyles={getSquareStyles()}\n        customDarkSquareStyle={{ backgroundColor: \"var(--dark-square)\" }}\n        customLightSquareStyle={{ backgroundColor: \"var(--light-square)\" }}\n      />\n    </div>\n  );\n};\n\nexport default ChessboardComponent;","import React, { useState, useRef, useEffect } from \"react\";\nimport \"../styles/components/settings.css\";\n\nconst Settings = ({ theme, setTheme, enableSound, setEnableSound }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const settingsRef = useRef(null);\n\n  // Toggle dropdown visibility\n  const toggleDropdown = () => setIsOpen((prev) => !prev);\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (settingsRef.current && !settingsRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, []);\n\n  return (\n    <div className=\"settings-container\" ref={settingsRef}>\n      <button className=\"settings-button\" onClick={toggleDropdown}>\n        ⚙ Settings\n      </button>\n\n      {isOpen && (\n        <div className=\"settings-dropdown\">\n          <div className=\"dropdown-item\">\n            <h4>Theme:</h4>\n            <select onChange={(e) => setTheme(e.target.value)} value={theme}>\n              <option value=\"classic\">Classic</option>\n              <option value=\"wood\">Wood</option>\n              <option value=\"marble\">Marble</option>\n              <option value=\"dark\">Dark Mode</option>\n            </select>\n          </div>\n          <div className=\"dropdown-item\">\n            <label>\n              <input type=\"checkbox\" checked={enableSound} onChange={(e) => setEnableSound(e.target.checked)} />\n              Enable Move Sound\n            </label>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Settings;\n","import React from \"react\";\nimport \"../styles/topContainer.css\"; // Add styles for the top bar\nimport Settings from \"./Settings\";\n\nconst TopBar = ({ resetGame, flipBoard, isFlipped}) => {\n  return (\n    <div className=\"top-container\">\n        <div className=\"top-bar\">\n            <button onClick={resetGame}>♻️ Reset Board</button>\n            <button onClick={flipBoard}>{isFlipped ? \"🔄 Unflip Board\" : \"🔃 Flip Board\"}</button>\n        </div>\n    </div>\n  );\n};\n\nexport default TopBar;","import React from \"react\";\nimport \"../styles/topContainer.css\"; // Add styles for the top bar\nimport Settings from \"./Settings\";\nimport TopBar from \"./TopBar\";\n\nconst TopContainer = ({ resetGame, flipBoard, isFlipped, theme, setTheme, enableSound, setEnableSound}) => {\n  return (\n    <div className=\"top-container\">\n        <TopBar resetGame={resetGame} flipBoard={flipBoard} isFlipped={isFlipped}/>\n        <Settings theme={theme} setTheme={setTheme} enableSound={enableSound} setEnableSound={setEnableSound} />\n    </div>\n  );\n};\n\nexport default TopContainer;","import React, { useState, useRef, useEffect } from \"react\";\nimport { Chess } from \"chess.js\";\nimport Clocks from \"./Clocks\";\nimport MoveHistory from \"./MoveHistory\";\nimport { saveGameToStorage, loadGameFromStorage } from \"../utils/storage\";\nimport playSound from \"../utils/soundUtils\";\nimport ChessboardComponent from \"./ChessboardComponent\";\nimport { getMoveType, resetGame , checkGameOver} from \"../utils/helpers\";\nimport TopContainer from \"./TopContainer\";\nimport \"../styles/global.css\";\nimport \"../styles/pageLayout.css\"\nimport \"../styles/topContainer.css\"\n\nconst ChessGame = () => {\n  const gameRef = useRef(new Chess());\n  const [position, setPosition] = useState(gameRef.current.fen());\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [whiteTime, setWhiteTime] = useState(600);\n  const [blackTime, setBlackTime] = useState(600);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [lastMove, setLastMove] = useState(null);\n  const [theme, setTheme] = useState(localStorage.getItem(\"chessTheme\") || \"classic\");\n  const [enableSound, setEnableSound] = useState(true);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isFlipped, setIsFlipped] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [gameResult, setGameResult] = useState(\"\");\n\n  // Flip Board\n  const flipBoard = () => setIsFlipped((prev) => !prev);\n\n  // Load game state from localStorage\n  useEffect(() => {\n    async function fetchData() {\n      // (gameRef, setPosition, setMoveHistory, setWhiteTime, setBlackTime, setTheme)\n      await loadGameFromStorage(gameRef, setPosition, setMoveHistory, setWhiteTime, setBlackTime, setTheme);\n      setIsLoaded(true); // ✅ Only after loading is complete\n    }\n    fetchData();\n  }, []);\n\n  // Save game state on updates (Only after loading is complete)\n  useEffect(() => {\n    if (!isLoaded) return;  // ✅ Prevent saving before loading is done\n    // (fen, moveHistory, whiteTime, blackTime)\n    saveGameToStorage(gameRef.current.fen(), moveHistory, whiteTime, blackTime, theme);\n  }, [position, moveHistory, whiteTime, blackTime, theme, isLoaded]); \n\n  // Timer Logic\n  useEffect(() => {\n    if (!gameStarted || gameOver) return;\n\n    const timer = setInterval(() => {\n      gameRef.current.turn() === \"w\"\n        ? setWhiteTime((prevWhiteTime) => {\n          if (prevWhiteTime <= 1) {\n            setGameResult(\"Black Won by Time\");\n            setGameOver(true);\n            clearInterval(timer); // Stop timer\n            return 0; // Ensure whiteTime does not go negative\n          }\n          return prevWhiteTime - 1;\n        })\n        : setBlackTime((prevBlackTime) => {\n          if (prevBlackTime <= 1) {\n            setGameResult(\"White Won by Time\");\n            setGameOver(true);\n            clearInterval(timer); // Stop timer\n            return 0; // Ensure blackTime does not go negative\n          }\n          return prevBlackTime - 1;\n        });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [gameStarted, position, gameOver]);\n\n  // Handle piece movement\n  const handleMove = ({ from, to }) => {\n    if (gameOver) return; // Prevent moves after game over\n    try {\n      const move = gameRef.current.move({ from, to, promotion: \"q\" });\n      if (!move) return;\n\n      if (!gameStarted) setGameStarted(true);\n      setPosition(gameRef.current.fen());\n      setMoveHistory((prev) => [...prev, move.san]);\n      setLastMove({ from, to });\n      if (enableSound) {\n        playSound(getMoveType(move, gameRef.current));\n      }\n      // gameRef, whiteTime, blackTime, setGameOver, setGameResult)\n      checkGameOver(gameRef, whiteTime, blackTime, setGameOver, setGameResult); // Check if game ended after this move\n    } catch (error) {\n      console.warn(\"Invalid move:\", error);\n    }\n  };\n\n  const resetGameHandler = () => {\n    gameRef.current.reset();\n    setPosition(gameRef.current.fen());\n    setMoveHistory([]);\n    setWhiteTime(120);\n    setBlackTime(120);\n    setGameStarted(false);\n    setGameOver(false);\n    setGameResult(\"\");\n    setLastMove(null)\n  };\n  \n\n  return (\n    <div className=\"main-container\">\n      <TopContainer\n        resetGame={resetGameHandler}\n        flipBoard={flipBoard}\n        isFlipped={isFlipped}\n        theme={theme}\n        setTheme={setTheme}\n        enableSound={enableSound}\n        setEnableSound={setEnableSound}\n      />\n      <div className=\"middle-container\">\n        <div className=\"left-menu-bar\">\n        </div>\n        <div className={`chess-container ${theme}-theme`}>\n          <div className=\"left-panel\"> \n            <Clocks whiteTime={whiteTime} blackTime={blackTime} isWhiteTurn={gameRef.current.turn() === \"w\"} isFlipped={isFlipped}/>\n          </div>\n          <div className=\"centre-area\">\n            <ChessboardComponent position={position} handleMove={handleMove} lastMove={lastMove} isFlipped={isFlipped}/>\n            {gameOver && <div className=\"game-over-overlay\"><div className=\"game-over-message\">\n              <p>\n              {gameResult}\n              </p>\n              <button className=\"restart-button\" onClick={resetGameHandler}>Restart Game</button>\n              </div></div>}\n          </div>\n          <div className=\"right-panel\">\n            <MoveHistory moveHistory={moveHistory} />\n          </div>\n        </div>\n        <div className=\"ad-banner\"></div>\n      </div>\n      <div className=\"bottom-container\">\n      </div>\n      </div>\n  );\n};\nexport default ChessGame;","const chessGameKey = \"chessGame\"\n\nexport const saveGameToStorage = (fen, moveHistory, whiteTime, blackTime, theme) => {\n    const gameData = {\n      fen,\n      moveHistory,\n      whiteTime,\n      blackTime,\n      theme,\n    };\n    localStorage.setItem(chessGameKey, JSON.stringify(gameData));\n  };\n  \n  export const loadGameFromStorage = (gameRef, setPosition, setMoveHistory, setWhiteTime, setBlackTime, setTheme) => {\n    const savedGame = localStorage.getItem(chessGameKey);\n    if (!savedGame) return; // No saved game, exit early\n  \n    try {\n        const gameData = JSON.parse(savedGame);\n        gameRef.current.load(gameData.fen); // ✅ Load saved FEN into the chess.js instance\n        setPosition(gameData.fen); // ✅ Update board position in React state\n        setMoveHistory(gameData.moveHistory || []); // ✅ Restore move history\n        setWhiteTime(gameData.whiteTime || 600); // ✅ Restore timer values\n        setBlackTime(gameData.blackTime || 600);\n        setTheme(gameData.theme)\n    } catch (error) {\n        console.error(\"Error parsing JSON from localStorage:\", error);\n        localStorage.removeItem(chessGameKey); // 🔥 Clear corrupted data to prevent errors\n    }\n  };\n  ","export const getMoveType = (move, game) => {\n    if (move.flags.includes(\"c\")) {\n        return \"capture\"\n    } \n    if (game.isCheckmate()) {\n        return \"checkmate\"\n    } \n    if (game.inCheck()) {\n        return \"check\"\n    } \n    return \"move\"\n}\n\n  // Reset Game\n export const resetGame = (gameRef, setPosition, setMoveHistory) => {\n    gameRef.current.reset();\n    setPosition(gameRef.current.fen());\n    setMoveHistory([]);\n  };\n\n  // Handle Game Over\nexport const checkGameOver = (gameRef, whiteTime, blackTime, setGameOver, setGameResult) => {\n        if (gameRef.current.isCheckmate()) {\n          setGameOver(true);\n          setGameResult(gameRef.current.turn() === \"w\" ? \"Black Wins by Checkmate!\" : \"White Wins by Checkmate!\");\n        } else if (gameRef.current.isDraw()) {\n          setGameOver(true);\n          setGameResult(\"Game Drawn!\");\n        } else if (whiteTime === 0) {\n          setGameOver(true);\n          setGameResult(\"Black Wins on Time!\");\n        } else if (blackTime === 0) {\n          setGameOver(true);\n          setGameResult(\"White Wins on Time!\");\n        }\n      };","import React from \"react\";\nimport ChessGame from \"./components/ChessGame\";\n\nconst App = () => {\n  return (\n    <ChessGame/>\n  );\n};\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}